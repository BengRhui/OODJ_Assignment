/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.customer;

import backend.entity.Customer;
import backend.entity.Transaction;
import backend.file_io.PictureIO;
import backend.utility.Utility;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Jun Hong (TP068580), Beng Rhui (TP068495)
 */
public class EWalletPanel extends javax.swing.JPanel {

    private static Customer currentCustomer;
    private static Transaction.TransactionType currentFilter;
    private static int status = 0;
    
    /**
     * Creates new form EWalletPanel
     */
    public EWalletPanel() {
        
        // Initialize customer
        currentCustomer = MainPage.getCustomer();
        currentFilter = null;
        
        // Render GUI components
        initComponents();
        
        // Generate transaction panels
        updateTransactionHistoryPanel();
    }
    
    /**
     * This method helps to refresh the transaction history panel.
     */
    public static void updateTransactionHistoryPanel() {
    
        // Remove everything in the panel
        transactionHistoryPanel.removeAll();
        
        // Retrieve the transaction list
        ArrayList<Transaction> transactionList = currentFilter == null ? Transaction.getTransactionList(currentCustomer) : Transaction.getTransactionList(currentCustomer, currentFilter);
        
        // If there is no vendor
        if (transactionList.isEmpty()) {
        
            // Create a JLabel and JPanel to display message
            JPanel emptyPanel = new JPanel(null);
            JLabel emptyLabel = new JLabel("No transaction history available.");
            
            // Set attributes to the label
            emptyLabel.setFont(new Font("Arial", Font.PLAIN, 18));
            emptyLabel.setBounds(0, 0, 500, 30);
            
            // Add label to panel
            emptyPanel.add(emptyLabel);
            emptyPanel.setBackground(new Color(255, 251, 233));
            
            // Add panel to the container
            transactionHistoryPanel.add(emptyPanel);
            
        } else {
        
            // Loop through vendor list
            for (Transaction transaction : transactionList) {

                // Create panel to show vendor information
                TransactionBriefPanel panel = new TransactionBriefPanel(transaction);
                transactionHistoryPanel.add(panel);
            }
            
            // Add empty panels if the number of vendors is not sufficient
            for (int i = transactionList.size() + 1; i < 7; i ++) {
                
                // Create empty panels
                JPanel emptyPanel = new JPanel();
                
                // Set background
                emptyPanel.setBackground(new Color(255, 251, 233));
                
                // Add the empty panel to container
                transactionHistoryPanel.add(emptyPanel);
            }
        }
        
        // Refresh panel
        transactionHistoryPanel.revalidate();
        transactionHistoryPanel.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentBalanceTitle = new javax.swing.JLabel();
        currencyTitle = new javax.swing.JLabel();
        walletAmountField = new javax.swing.JLabel();
        displayIcon = new javax.swing.JLabel();
        cashFlowTitle = new javax.swing.JLabel();
        cashInIcon = new javax.swing.JLabel();
        cashInTitle = new javax.swing.JLabel();
        cashInAmount = new javax.swing.JLabel();
        cashOutIcon = new javax.swing.JLabel();
        cashOutTitle = new javax.swing.JLabel();
        cashOutAmount = new javax.swing.JLabel();
        transactionHistoryTitle = new javax.swing.JLabel();
        overallPanel = new javax.swing.JPanel();
        overallText = new javax.swing.JLabel();
        cashInPanel = new javax.swing.JPanel();
        cashInText = new javax.swing.JLabel();
        cashOutPanel = new javax.swing.JPanel();
        cashOutText = new javax.swing.JLabel();
        trasactionHistoryScrollPane = new javax.swing.JScrollPane();
        transactionHistoryPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 251, 233));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        currentBalanceTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        currentBalanceTitle.setText("Current Balance");
        add(currentBalanceTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, -1, -1));

        currencyTitle.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        currencyTitle.setText("RM");
        add(currencyTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 106, -1, 60));

        walletAmountField.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        walletAmountField.setText(String.format("%.2f", currentCustomer.getEWalletAmount()));
        add(walletAmountField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 106, 280, 60));

        displayIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        displayIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/show_icon.png"))); // NOI18N
        displayIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        displayIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayIconMouseClicked(evt);
            }
        });
        add(displayIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 100, 90, 70));

        cashFlowTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        cashFlowTitle.setText("Cash Flow");
        add(cashFlowTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 40, -1, -1));

        cashInIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cashInIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/cash_in.png"))); // NOI18N
        add(cashInIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 70, 70));

        cashInTitle.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        cashInTitle.setText("Total Cash In");
        add(cashInTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, -1, -1));

        cashInAmount.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        cashInAmount.setText(String.format("RM%.2f", Transaction.getTotalCashFlow(currentCustomer, Transaction.TransactionType.CASH_IN)));
        add(cashInAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 130, 240, -1));

        cashOutIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/cash_out.png"))); // NOI18N
        add(cashOutIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 100, 60, 70));

        cashOutTitle.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        cashOutTitle.setText("Total Cash Out");
        add(cashOutTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 100, -1, -1));

        cashOutAmount.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        cashOutAmount.setText(String.format("RM%.2f", Transaction.getTotalCashFlow(currentCustomer, Transaction.TransactionType.CASH_OUT)));
        add(cashOutAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 130, 250, -1));

        transactionHistoryTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        transactionHistoryTitle.setText("Transaction History");
        add(transactionHistoryTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 350, 50));

        overallPanel.setBackground(new java.awt.Color(227, 202, 165));
        overallPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        overallPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        overallPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        overallText.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        overallText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        overallText.setText("Overall");
        overallText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                overallTextMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                overallTextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                overallTextMouseExited(evt);
            }
        });
        overallPanel.add(overallText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 50));

        add(overallPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(862, 210, 160, 50));

        cashInPanel.setBackground(new java.awt.Color(255, 255, 255));
        cashInPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cashInPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cashInPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cashInText.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cashInText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cashInText.setText("Cash In");
        cashInText.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cashInText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cashInTextMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cashInTextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cashInTextMouseExited(evt);
            }
        });
        cashInPanel.add(cashInText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 50));

        add(cashInPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1021, 210, 160, 50));

        cashOutPanel.setBackground(new java.awt.Color(255, 255, 255));
        cashOutPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cashOutPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cashOutPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cashOutText.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cashOutText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cashOutText.setText("Cash Out");
        cashOutText.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cashOutText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cashOutTextMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cashOutTextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cashOutTextMouseExited(evt);
            }
        });
        cashOutPanel.add(cashOutText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 50));

        add(cashOutPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 210, 160, 50));

        trasactionHistoryScrollPane.setBorder(null);
        trasactionHistoryScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        trasactionHistoryScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        transactionHistoryPanel.setBackground(new java.awt.Color(255, 251, 233));
        transactionHistoryPanel.setLayout(new java.awt.GridLayout(0, 3, 10, 10));
        trasactionHistoryScrollPane.setViewportView(transactionHistoryPanel);

        add(trasactionHistoryScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 1280, 230));
    }// </editor-fold>//GEN-END:initComponents

    private void displayIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayIconMouseClicked

        // Retrieve the show and hide icon
        File[] directory = new File(PictureIO.PARENT_PATH_TO_SYSTEM_DIRECTORY).listFiles();
        File showIconFile = Utility.retrieveFileWithoutExtension(directory, "show_icon");
        File hideIconFile = Utility.retrieveFileWithoutExtension(directory, "hide_icon");
        ImageIcon showIcon = new ImageIcon(showIconFile.getAbsolutePath());
        ImageIcon hideIcon = new ImageIcon(hideIconFile.getAbsolutePath());
        
        // Check the status to determine which icon to display (0 for showing currently)
        if (status == 0) {
            
            // Hide the text
            walletAmountField.setText("*".repeat(walletAmountField.getText().length()));
            cashInAmount.setText("*".repeat(cashInAmount.getText().length()));
            cashOutAmount.setText("*".repeat(cashOutAmount.getText().length()));
            
            // Switch the icon and status
            displayIcon.setIcon(hideIcon);
            status = 1;
            
        } else {
            
            // Show the text
            walletAmountField.setText(String.format("%.2f", currentCustomer.getEWalletAmount()));
            cashInAmount.setText(String.format("RM%.2f", Transaction.getTotalCashFlow(currentCustomer, Transaction.TransactionType.CASH_IN)));
            cashOutAmount.setText(String.format("RM%.2f", Transaction.getTotalCashFlow(currentCustomer, Transaction.TransactionType.CASH_OUT)));
            
            // Switch icon and status
            displayIcon.setIcon(showIcon);
            status = 0;
        }
    }//GEN-LAST:event_displayIconMouseClicked

    private void overallTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_overallTextMouseEntered

        // If the filter is not overall
        if (currentFilter != null) {
            
            // Set panel colour
            overallPanel.setBackground(new Color(227, 202, 165));
        }
    }//GEN-LAST:event_overallTextMouseEntered

    private void overallTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_overallTextMouseExited

        // If the filter is not overall
        if (currentFilter != null) {
            
            // Set panel colour
            overallPanel.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_overallTextMouseExited

    private void cashInTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashInTextMouseEntered

        // If the filter is not cash in
        if (currentFilter == null || !currentFilter.toString().equals("Cash In")) {
            
            // Set panel colour
            cashInPanel.setBackground(new Color(227, 202, 165));
        }
    }//GEN-LAST:event_cashInTextMouseEntered

    private void cashInTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashInTextMouseExited

        // If the filter is not cash in
        if (currentFilter == null || !currentFilter.toString().equals("Cash In")) {
            
            // Set panel colour
            cashInPanel.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_cashInTextMouseExited

    private void cashOutTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashOutTextMouseEntered

        // If the filter is not cash out
        if (currentFilter == null || !currentFilter.toString().equals("Cash Out")) {
            
            // Set panel colour
            cashOutPanel.setBackground(new Color(227, 202, 165));
        }
    }//GEN-LAST:event_cashOutTextMouseEntered

    private void cashOutTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashOutTextMouseExited

        // If the filter is not cash out
        if (currentFilter == null || !currentFilter.toString().equals("Cash Out")) {
            
            // Set panel colour
            cashOutPanel.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_cashOutTextMouseExited

    private void overallTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_overallTextMouseClicked

        // If the selection is not current filter
        if (currentFilter != null) {
        
            // Change the font and background
            overallText.setFont(new Font("Arial", Font.BOLD, 18));
            overallPanel.setBackground(new Color(227, 202, 165));
            
            // Reset the background for the other ones
            cashInText.setFont(new Font("Arial", Font.PLAIN, 18));
            cashInPanel.setBackground(Color.WHITE);
            cashOutText.setFont(new Font("Arial", Font.PLAIN, 18));
            cashOutPanel.setBackground(Color.WHITE);
            
            // Set the filter to overall
            currentFilter = null;
            
            // Update panels
            updateTransactionHistoryPanel();
        }
    }//GEN-LAST:event_overallTextMouseClicked

    private void cashInTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashInTextMouseClicked

        // If the selection is not current filter
        if (currentFilter == null || !currentFilter.toString().equals("Cash In")) {
        
            // Change the font and background
            cashInText.setFont(new Font("Arial", Font.BOLD, 18));
            cashInPanel.setBackground(new Color(227, 202, 165));
            
            // Reset the background for the other ones
            overallText.setFont(new Font("Arial", Font.PLAIN, 18));
            overallPanel.setBackground(Color.WHITE);
            cashOutText.setFont(new Font("Arial", Font.PLAIN, 18));
            cashOutPanel.setBackground(Color.WHITE);
            
            // Set the filter to overall
            currentFilter = Transaction.TransactionType.CASH_IN;
                        
            // Update panels
            updateTransactionHistoryPanel();
        }
    }//GEN-LAST:event_cashInTextMouseClicked

    private void cashOutTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashOutTextMouseClicked

        // If the selection is not current filter
        if (currentFilter == null || !currentFilter.toString().equals("Cash Out")) {
        
            // Change the font and background
            cashOutText.setFont(new Font("Arial", Font.BOLD, 18));
            cashOutPanel.setBackground(new Color(227, 202, 165));
            
            // Reset the background for the other ones
            overallText.setFont(new Font("Arial", Font.PLAIN, 18));
            overallPanel.setBackground(Color.WHITE);
            cashInText.setFont(new Font("Arial", Font.PLAIN, 18));
            cashInPanel.setBackground(Color.WHITE);
            
            // Set the filter to overall
            currentFilter = Transaction.TransactionType.CASH_OUT;
                        
            // Update panels
            updateTransactionHistoryPanel();
        }
    }//GEN-LAST:event_cashOutTextMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cashFlowTitle;
    private javax.swing.JLabel cashInAmount;
    private javax.swing.JLabel cashInIcon;
    private javax.swing.JPanel cashInPanel;
    private javax.swing.JLabel cashInText;
    private javax.swing.JLabel cashInTitle;
    private javax.swing.JLabel cashOutAmount;
    private javax.swing.JLabel cashOutIcon;
    private javax.swing.JPanel cashOutPanel;
    private javax.swing.JLabel cashOutText;
    private javax.swing.JLabel cashOutTitle;
    private javax.swing.JLabel currencyTitle;
    private javax.swing.JLabel currentBalanceTitle;
    private javax.swing.JLabel displayIcon;
    private javax.swing.JPanel overallPanel;
    private javax.swing.JLabel overallText;
    private static javax.swing.JPanel transactionHistoryPanel;
    private javax.swing.JLabel transactionHistoryTitle;
    private javax.swing.JScrollPane trasactionHistoryScrollPane;
    private javax.swing.JLabel walletAmountField;
    // End of variables declaration//GEN-END:variables
}
