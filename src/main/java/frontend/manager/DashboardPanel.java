/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.manager;

import backend.entity.Feedback;
import backend.entity.Order;
import backend.utility.Utility.TimeframeFilter;
import frontend.pop_up.SystemPopUp;
import frontend.pop_up.TimeFramePopUp;
import frontend.utility.Graph;
import java.util.ArrayList;
import java.util.stream.Collectors;
import javax.swing.JPanel;

/**
 *
 * @author Chun Ming (TP068983), Beng Rhui (TP068495)
 */
public class DashboardPanel extends javax.swing.JPanel {

    private static ArrayList<Order> orderData;
    private static TimeframeFilter orderFilter;
    private static ArrayList<Feedback> feedbackData;
    private static TimeframeFilter feedbackFilter;
    
    /**
     * Creates new form DashboardPanel
     */
    public DashboardPanel() {
        
        // Initialize the data
        orderData = Order.filterOrder(TimeframeFilter.YEARLY);
        setOrderFilter(TimeframeFilter.YEARLY);
        feedbackData = Feedback.filterFeedback(TimeframeFilter.YEARLY);
        setFeedbackFilter(TimeframeFilter.YEARLY);

        // Render GUI components
        initComponents();
        
        // Render the graphs
        updateRevenueGraph();
        updateFeedbackGraph();
    }
    
    /**
     * This method helps to set the filter for order-related data.
     * @param filter The filter imposed
     */
    public static void setOrderFilter(TimeframeFilter filter) {
        orderFilter = filter;
    }
    
    /**
     * This method helps to set the filter for feedback-related data.
     * @param filter The filter imposed
     */
    public static void setFeedbackFilter(TimeframeFilter filter) {
        feedbackFilter = filter;
    }

    /**
     * This method helps to generate a revenue graph based on current order list and filter.
     */
    public static void updateRevenueGraph() {
        
        // Remove the existing graph on the panel
        revenuePanel.removeAll();
        
        // Retrieve the data based on filter (only capture completed orders)
        orderData = Order.filterOrder(orderFilter).stream()
                .filter(order -> order.getOrderStatus() == Order.OrderStatus.COMPLETED)
                .collect(Collectors.toCollection(ArrayList::new));
        
        // Generate the graph and add it to the panel
        JPanel graph = new Graph(orderData, Graph.REVENUE_GRAPH, orderFilter, 610, 430);
        graph.setLocation(20, 30);
        revenuePanel.add(graph);
    }
    
    /**
     * This method helps to update the feedback graph based on current feedback data and filter.
     */
    public static void updateFeedbackGraph() {

        // Remove the existing graph on the panel
        feedbackPanel.removeAll();
        
        // Retrieve the data based on filter
        feedbackData = Feedback.filterFeedback(feedbackFilter);
        
        // Generate the graph and add it to the panel
        JPanel graph = new Graph(feedbackData, Graph.FEEDBACK_GRAPH, feedbackFilter, 590, 430);
        graph.setLocation(5, 30);
        feedbackPanel.add(graph);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        revenueTitle = new javax.swing.JLabel();
        revenueExportIcon = new javax.swing.JLabel();
        revenueFilterIcon = new javax.swing.JLabel();
        feedbackTitle = new javax.swing.JLabel();
        feedbackExportIcon = new javax.swing.JLabel();
        feedbackFilterIcon = new javax.swing.JLabel();
        revenuePanel = new javax.swing.JPanel();
        feedbackPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 251, 233));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        revenueTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        revenueTitle.setText("Revenue");
        add(revenueTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));

        revenueExportIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        revenueExportIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/excel_icon.png"))); // NOI18N
        revenueExportIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        revenueExportIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                revenueExportIconMouseClicked(evt);
            }
        });
        add(revenueExportIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, 60, 60));

        revenueFilterIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/customize_icon.png"))); // NOI18N
        revenueFilterIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        revenueFilterIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                revenueFilterIconMouseClicked(evt);
            }
        });
        add(revenueFilterIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 40, 70, 60));

        feedbackTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        feedbackTitle.setText("Feedback");
        add(feedbackTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 50, -1, -1));

        feedbackExportIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        feedbackExportIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/excel_icon.png"))); // NOI18N
        feedbackExportIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        feedbackExportIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feedbackExportIconMouseClicked(evt);
            }
        });
        add(feedbackExportIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 40, 60, 60));

        feedbackFilterIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/customize_icon.png"))); // NOI18N
        feedbackFilterIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        feedbackFilterIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feedbackFilterIconMouseClicked(evt);
            }
        });
        add(feedbackFilterIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 40, 70, 60));

        revenuePanel.setBackground(new java.awt.Color(255, 255, 255));
        revenuePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        javax.swing.GroupLayout revenuePanelLayout = new javax.swing.GroupLayout(revenuePanel);
        revenuePanel.setLayout(revenuePanelLayout);
        revenuePanelLayout.setHorizontalGroup(
            revenuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 646, Short.MAX_VALUE)
        );
        revenuePanelLayout.setVerticalGroup(
            revenuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 476, Short.MAX_VALUE)
        );

        add(revenuePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 650, 480));

        feedbackPanel.setBackground(new java.awt.Color(255, 255, 255));
        feedbackPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        javax.swing.GroupLayout feedbackPanelLayout = new javax.swing.GroupLayout(feedbackPanel);
        feedbackPanel.setLayout(feedbackPanelLayout);
        feedbackPanelLayout.setHorizontalGroup(
            feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 596, Short.MAX_VALUE)
        );
        feedbackPanelLayout.setVerticalGroup(
            feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        add(feedbackPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 110, 600, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void revenueExportIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_revenueExportIconMouseClicked

        // Download the data
        boolean status = Order.exportDataToExcel(orderFilter);
        
        // Display a message to indicate that the download is successful
        if (status) {
        
            // Display download successful message
            SystemPopUp successMessage = new SystemPopUp(
                    MainPage.currentFrame,
                    "Download Successful",
                    "The Excel file containing order data is downloaded to your computer.",
                    new String[]{"OK"}
            );
            successMessage.setVisible(true);
            
        } else {
            
            // Display error message
            SystemPopUp errorMessage = new SystemPopUp(
                    MainPage.currentFrame,
                    "Error",
                    "Error in downloading order file to Excel. Please inspect code.",
                    new String[]{"OK"}
            );
            errorMessage.setVisible(true);
        }
    }//GEN-LAST:event_revenueExportIconMouseClicked

    private void revenueFilterIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_revenueFilterIconMouseClicked

        // Disable parent frame
        MainPage.currentFrame.setEnabled(false);

        // Create pop up to select time
        TimeFramePopUp selectTime = new TimeFramePopUp(MainPage.currentFrame, orderFilter);
        selectTime.setVisible(true);
        
        // Get the selected filter
        TimeframeFilter filter = selectTime.getFilter();
        
        // Update the filter and graph
        setOrderFilter(filter);
        updateRevenueGraph();
    }//GEN-LAST:event_revenueFilterIconMouseClicked

    private void feedbackExportIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feedbackExportIconMouseClicked

        // Download the data
        boolean status = Feedback.exportDataToExcel(feedbackFilter);
        
        // Display a message to indicate that the download is successful
        if (status) {
        
            // Display download successful message
            SystemPopUp successMessage = new SystemPopUp(
                    MainPage.currentFrame,
                    "Download Successful",
                    "The Excel file containing feedback data is downloaded to your computer.",
                    new String[]{"OK"}
            );
            successMessage.setVisible(true);
            
        } else {
            
            // Display error message
            SystemPopUp errorMessage = new SystemPopUp(
                    MainPage.currentFrame,
                    "Error",
                    "Error in downloading feedback file to Excel. Please inspect code.",
                    new String[]{"OK"}
            );
            errorMessage.setVisible(true);
        }
    }//GEN-LAST:event_feedbackExportIconMouseClicked

    private void feedbackFilterIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feedbackFilterIconMouseClicked

        // Disable the parent frame
        MainPage.currentFrame.setEnabled(false);

        // Display the pop up to select filter
        TimeFramePopUp selectTime = new TimeFramePopUp(MainPage.currentFrame, feedbackFilter);
        selectTime.setVisible(true);
        
        // Retrieve the filter
        TimeframeFilter filter = selectTime.getFilter();
        
        // Update the filter and graph
        setFeedbackFilter(filter);
        updateFeedbackGraph();
    }//GEN-LAST:event_feedbackFilterIconMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel feedbackExportIcon;
    private javax.swing.JLabel feedbackFilterIcon;
    private static javax.swing.JPanel feedbackPanel;
    private javax.swing.JLabel feedbackTitle;
    private javax.swing.JLabel revenueExportIcon;
    private javax.swing.JLabel revenueFilterIcon;
    private static javax.swing.JPanel revenuePanel;
    private javax.swing.JLabel revenueTitle;
    // End of variables declaration//GEN-END:variables
}
