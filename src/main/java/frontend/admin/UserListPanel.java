/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.admin;

import backend.entity.Customer;
import backend.entity.DeliveryRunner;
import backend.entity.User;
import backend.entity.Vendor;
import frontend.pop_up.FilterUserPopUp;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author limbengrhui
 */
public class UserListPanel extends javax.swing.JPanel {

    private static ArrayList<? extends User> userList;
    private static String currentUserType;
    
    /**
     * Creates new form UserListPanel
     */
    public UserListPanel() {
        
        // Set current user type as vendor
        currentUserType = "Vendor";
        
        // Render GUI components
        initComponents();
        
        // Update the panel with the users
        updatePanel();
    }

    /**
     * This method helps to retrieve the current user type displayed.
     * @return A string representing the current user type
     */
    public static String getCurrentUserType() {
        return currentUserType;
    }
    
    /**
     * This method helps to set the current user type and update to the panel.
     * @param userType The user type to be stored
     */
    public static void setCurrentUserType(String userType) {
        currentUserType = userType;
    }
    
    /**
     * This method helps to update the panel that displays each user panel.
     */
    public static void updatePanel() {
        
        // Clear the current panel
        userDetailsContainer.removeAll();
        
        // Check the user type
        switch (currentUserType) {
            
            // Initialize different user list based on different user type
            case "Vendor" -> userList = Vendor.getVendorList();
            case "Delivery Runner" -> userList = DeliveryRunner.getDeliveryRunnerList();
            case "Customer" -> userList = Customer.getCustomerList();
            
            // Call an exception if the input does not match
            default -> throw new IllegalStateException("The selection from JComboBox is incorrect. Please inspect code");
        }
        
        // Loop through each user
        for (User user : userList) {
            
            // Create the corresponding user details panel and add to container panel
            JPanel userDetails = new UserDetailsPanel(user);
            
            // Add the individual panel to the container
            userDetailsContainer.add(userDetails);
        }
        
        // If there is no user, 
        if (userList.isEmpty()) {
        
            // Set the layout of the panel to null
            userDetailsContainer.setLayout(null);
            
            // Generate a empty label to indicate that no user exists
            JLabel emptyLabel = new JLabel("No user exists in the system.");
            emptyLabel.setFont(new Font("Arial", Font.PLAIN, 24));
            emptyLabel.setBounds(2, 0, 350, 30);
            
            // Add the label to the container
            userDetailsContainer.add(emptyLabel);
            
        } else if (userList.size() < 4) {
        
            // Start a loop to create empty panels to be placed inside the grid layout
            for (int i = userList.size() + 1; i < 7; i ++) {
                
                // Create the empty panel
                JPanel emptyPanel = new JPanel();
                emptyPanel.setBackground(new Color(255, 251, 233));
                
                // Add the empty panel to the container
                userDetailsContainer.add(emptyPanel);
            }
        }
        
        // Update the title
        userListTitle.setText(currentUserType + " List");
        
        // Refresh the pane after all actions
        userDetailsContainer.revalidate();
        userDetailsContainer.repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userListTitle = new javax.swing.JLabel();
        filterLabel = new javax.swing.JLabel();
        userDetailsScrollPane = new javax.swing.JScrollPane();
        userDetailsContainer = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        registerButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 251, 233));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userListTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        userListTitle.setText(currentUserType + " List");
        add(userListTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 350, -1));

        filterLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/customize_icon.png"))); // NOI18N
        filterLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        filterLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterLabelMouseClicked(evt);
            }
        });
        add(filterLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1238, 70, -1, 60));

        userDetailsScrollPane.setBackground(new java.awt.Color(255, 251, 233));
        userDetailsScrollPane.setBorder(null);
        userDetailsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        userDetailsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        userDetailsContainer.setBackground(new java.awt.Color(255, 251, 233));
        userDetailsContainer.setLayout(new java.awt.GridLayout(0, 3, 10, 10));
        userDetailsScrollPane.setViewportView(userDetailsContainer);

        add(userDetailsScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 1220, 480));

        backButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.setFocusPainted(false);
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backButtonMouseExited(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 670, 190, 60));

        registerButton.setBackground(new java.awt.Color(0, 0, 0));
        registerButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        registerButton.setForeground(new java.awt.Color(255, 255, 255));
        registerButton.setText("+ Register New User");
        registerButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        registerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registerButton.setFocusPainted(false);
        registerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                registerButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                registerButtonMouseExited(evt);
            }
        });
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });
        add(registerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 670, 280, 60));
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed

        // Return to main page
        MainPage.setCard("actionPanel");
    }//GEN-LAST:event_backButtonActionPerformed

    private void filterLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterLabelMouseClicked

        // Generate pop up to let user choose the user type
        FilterUserPopUp filterPopUp = new FilterUserPopUp(MainPage.currentFrame);
        filterPopUp.setVisible(true);
    }//GEN-LAST:event_filterLabelMouseClicked

    private void backButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseEntered

        // Change the colour of the button
        backButton.setBackground(new Color(206, 171, 147));
    }//GEN-LAST:event_backButtonMouseEntered

    private void backButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseExited

        // Change the colour of the button
        backButton.setBackground(Color.WHITE);
    }//GEN-LAST:event_backButtonMouseExited

    private void registerButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerButtonMouseEntered

        // Change the colour of the button
        registerButton.setBackground(new Color(206, 171, 147));
        
        // Change the text colour of the button
        registerButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_registerButtonMouseEntered

    private void registerButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerButtonMouseExited

        // Change the colour of the button
        registerButton.setBackground(Color.BLACK);
        
        // Change the text colour of the button
        registerButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_registerButtonMouseExited

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed

        // Call different forms depending on the user type
        switch (currentUserType) {
            
            case "Vendor" -> {
                VendorDetailsForm registerVendor = new VendorDetailsForm(null);
                registerVendor.setVisible(true);
                registerVendor.setLocationRelativeTo(this);
            }
            
            case "Customer" -> {
                CustomerDetailsForm registerCustomer = new CustomerDetailsForm(null);
                registerCustomer.setVisible(true);
                registerCustomer.setLocationRelativeTo(this);
            }
        }
        
        
        // Disable the current frame
        MainPage.currentFrame.setEnabled(false);
    }//GEN-LAST:event_registerButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JButton registerButton;
    private static javax.swing.JPanel userDetailsContainer;
    private static javax.swing.JScrollPane userDetailsScrollPane;
    private static javax.swing.JLabel userListTitle;
    // End of variables declaration//GEN-END:variables
}
