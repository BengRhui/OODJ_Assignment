/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.admin;

import backend.entity.Customer;
import backend.entity.DeliveryRunner;
import backend.entity.User;
import backend.entity.Vendor;
import frontend.pop_up.SystemPopUp;

/**
 *
 * @author Chun Ming (TP068983), Beng Rhui (TP068495)
 */
public class UserDetailsPanel extends javax.swing.JPanel {

    private User currentUser;
    private String userID;
    private String userName;
    private String userDescription;
    
    /**
     * Creates new form UserDetailsPanel
     */
    public UserDetailsPanel(User user) {
        
        // Set the current user
        currentUser = user;
        
        // Retrieve the ID and name to be displayed
        userID = user.getUserID();
        userName = user.getName();
        
        // Retrieve the description
        switch (user) {
            
            // Generate a different description for each user
            case Vendor vendor -> userDescription = "Stall: " + vendor.getStall().getStallName();
            case DeliveryRunner runner -> userDescription = "Contact No: " + runner.getContactNumber();
            case Customer customer -> userDescription = "Contact No: " + customer.getContactNumber();
            
            // If the user type is not available, throw an exception
            default -> throw new IllegalArgumentException("The user type is invalid. Please inspect code.");
        }
        
        // Render the GUI
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userIDLabel = new javax.swing.JLabel();
        userNameScrollPane = new javax.swing.JScrollPane();
        userNameTextArea = new javax.swing.JTextArea();
        userDescriptionScrollPane = new javax.swing.JScrollPane();
        userDescriptionTextArea = new javax.swing.JTextArea();
        editIcon = new javax.swing.JLabel();
        deleteIcon = new javax.swing.JLabel();

        setBackground(new java.awt.Color(227, 202, 165));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        setMaximumSize(new java.awt.Dimension(400, 235));
        setMinimumSize(new java.awt.Dimension(400, 235));
        setPreferredSize(new java.awt.Dimension(400, 235));
        setSize(new java.awt.Dimension(400, 235));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userIDLabel.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        userIDLabel.setText(userID);
        add(userIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 230, -1));

        userNameScrollPane.setBorder(null);
        userNameScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        userNameScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        userNameTextArea.setEditable(false);
        userNameTextArea.setBackground(new java.awt.Color(227, 202, 165));
        userNameTextArea.setColumns(20);
        userNameTextArea.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        userNameTextArea.setRows(1);
        userNameTextArea.setText(userName);
        userNameTextArea.setBorder(null);
        userNameTextArea.setCaretColor(new java.awt.Color(227, 202, 165));
        userNameTextArea.setCaretPosition(0);
        userNameScrollPane.setViewportView(userNameTextArea);

        add(userNameScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 330, 30));

        userDescriptionScrollPane.setBorder(null);
        userDescriptionScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        userDescriptionScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        userDescriptionTextArea.setBackground(new java.awt.Color(227, 202, 165));
        userDescriptionTextArea.setColumns(20);
        userDescriptionTextArea.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        userDescriptionTextArea.setRows(1);
        userDescriptionTextArea.setText(userDescription);
        userDescriptionTextArea.setBorder(null);
        userDescriptionTextArea.setCaretColor(new java.awt.Color(227, 202, 165));
        userDescriptionTextArea.setCaretPosition(0);
        userDescriptionScrollPane.setViewportView(userDescriptionTextArea);

        add(userDescriptionScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 330, -1));

        editIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/edit_icon.png"))); // NOI18N
        editIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editIconMouseClicked(evt);
            }
        });
        add(editIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, -1, 40));

        deleteIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/delete_icon.png"))); // NOI18N
        deleteIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteIconMouseClicked(evt);
            }
        });
        add(deleteIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 170, 40, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void editIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editIconMouseClicked

        // Call different forms depending on the user type
        switch (currentUser) {
            
            // For vendor
            case Vendor vendor -> {
                VendorDetailsForm editForm = new VendorDetailsForm(vendor);
                editForm.setVisible(true);
                editForm.setLocationRelativeTo(MainPage.currentFrame);
            }
            
            // For runner
            case DeliveryRunner runner -> {
                RunnerDetailsForm editForm = new RunnerDetailsForm(runner);
                editForm.setVisible(true);
                editForm.setLocationRelativeTo(MainPage.currentFrame);
            }
            
            // For customer
            case Customer customer -> {
                CustomerDetailsForm editForm = new CustomerDetailsForm(customer);
                editForm.setVisible(true);
                editForm.setLocationRelativeTo(MainPage.currentFrame);
            }
            
            // Throw an exception if the user type is invalid
            default -> throw new IllegalStateException("The user type is invalid. Please inspect code.");
        }
        
        // Disable the main frame
        MainPage.currentFrame.setEnabled(false);
    }//GEN-LAST:event_editIconMouseClicked

    private void deleteIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteIconMouseClicked

        // Display a message pop up for confirmation
        SystemPopUp confirmDelete = new SystemPopUp(
                MainPage.currentFrame,
                "Confirm Delete",
                "Do you wish to delete the user?",
                new String[]{"No", "Yes"}
        );
        confirmDelete.setVisible(true);
        
        // Retrieve the status of the message
        int status = confirmDelete.getStatus();
        
        // If user choose "yes"
        if (status == 1) {
            
            switch (currentUser) {
                
                // Perform different deletion based on different user
                case Vendor vendor -> vendor.deleteVendor();
                case DeliveryRunner runner -> runner.deleteRunner();
                case Customer customer -> customer.deleteCustomer();
                
                // Throw an exception if the user is not correct
                default -> throw new IllegalStateException("Invalid state. Please inspect code.");
            }
            
            // Show a message to inform that the deletion is successful
            SystemPopUp successDelete = new SystemPopUp(
                    MainPage.currentFrame,
                    "Delete Successful",
                    "The user is deleted successfully.",
                    new String[]{"OK"}
            );
            successDelete.setVisible(true);
        }
        
        // Update the panel after deletion
        UserListPanel.updatePanel();
    }//GEN-LAST:event_deleteIconMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel deleteIcon;
    private javax.swing.JLabel editIcon;
    private javax.swing.JScrollPane userDescriptionScrollPane;
    private javax.swing.JTextArea userDescriptionTextArea;
    private javax.swing.JLabel userIDLabel;
    private javax.swing.JScrollPane userNameScrollPane;
    private javax.swing.JTextArea userNameTextArea;
    // End of variables declaration//GEN-END:variables
}
