/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend.admin;

import backend.entity.Stall;
import backend.entity.Vendor;
import backend.utility.Utility;
import frontend.pop_up.SystemPopUp;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author Chun Ming (TP068983), Beng Rhui (TP068495)
 */
public class VendorDetailsForm extends javax.swing.JFrame {

    private static Vendor currentVendor;
    
    /**
     * Creates new form VendorDetailsForm
     */
    public VendorDetailsForm(Vendor vendor) {
        
        // Save the current vendor
        currentVendor = vendor;
        
        // Render the GUI
        initComponents();
        
        // Initialize text if vendor detail is meant to be edited
        if (vendor != null) initializeLabel();
        
    }

    private void initializeLabel() {
        
        // Retrieve the attributes of the current vendor
        String vendorIDString = currentVendor.getUserID();
        String stallIDString = currentVendor.getStall().getStallID();
        String vendorNameString = currentVendor.getName();
        String stallNameString = currentVendor.getStall().getStallName();
        String emailString = currentVendor.getEmail();
        String passwordString = currentVendor.getPassword();
        
        // Set the values to the text fields
        vendorID.setText(vendorIDString);
        stallID.setText(stallIDString);
        vendorName.setText(vendorNameString);
        stallNameDropDown.setSelectedItem(stallNameString);
        email.setText(emailString);
        passwordField.setText(passwordString);
        confirmPasswordField.setText(passwordString);
        
        // Change the text colour and echo char
        vendorID.setForeground(Color.BLACK);
        stallID.setForeground(Color.BLACK);
        vendorName.setForeground(Color.BLACK);
        stallNameDropDown.setForeground(Color.BLACK);
        email.setForeground(Color.BLACK);
        passwordField.setForeground(Color.BLACK);
        confirmPasswordField.setForeground(Color.BLACK);
        
        passwordField.setEchoChar('•');
        confirmPasswordField.setEchoChar('•');
        
        // Disable the password field (only can be changed at the reset password page)
        passwordField.setEditable(false);
        passwordField.setFocusable(false);
        passwordField.setBackground(Color.WHITE);
        
        confirmPasswordField.setEditable(false);
        confirmPasswordField.setFocusable(false);
        confirmPasswordField.setBackground(Color.WHITE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        vendorDetailsTitle = new javax.swing.JLabel();
        vendorIDLabel = new javax.swing.JLabel();
        vendorID = new javax.swing.JTextField();
        stallIDLabel = new javax.swing.JLabel();
        stallID = new javax.swing.JTextField();
        vendorNameLabel = new javax.swing.JLabel();
        vendorName = new javax.swing.JTextField();
        stallNameLabel = new javax.swing.JLabel();
        stallNameDropDown = new javax.swing.JComboBox<>(
            Stall.getAllStallName()
        );
        emailLabel = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmPasswordField = new javax.swing.JPasswordField();
        note = new javax.swing.JLabel();
        note1 = new javax.swing.JLabel();
        note2 = new javax.swing.JLabel();
        note3 = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Vendor Details");
        setAlwaysOnTop(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 251, 233));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        vendorDetailsTitle.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        vendorDetailsTitle.setText("Vendor Details");
        jPanel1.add(vendorDetailsTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        vendorIDLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        vendorIDLabel.setText("Vendor ID");
        jPanel1.add(vendorIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, -1, -1));

        vendorID.setEditable(false);
        vendorID.setBackground(new java.awt.Color(255, 255, 255));
        vendorID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        vendorID.setText(Vendor.generateNewID());
        vendorID.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        vendorID.setFocusable(false);
        jPanel1.add(vendorID, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 220, 50));

        stallIDLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        stallIDLabel.setText("Stall ID");
        jPanel1.add(stallIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, -1, -1));

        stallID.setEditable(false);
        stallID.setBackground(new java.awt.Color(255, 255, 255));
        stallID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        stallID.setForeground(new java.awt.Color(204, 204, 204));
        stallID.setText("-");
        stallID.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        stallID.setFocusable(false);
        jPanel1.add(stallID, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 190, 220, 50));

        vendorNameLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        vendorNameLabel.setText("Vendor Name");
        jPanel1.add(vendorNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, -1, -1));

        vendorName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        vendorName.setForeground(new java.awt.Color(204, 204, 204));
        vendorName.setText("Enter Name Here");
        vendorName.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        vendorName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                vendorNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                vendorNameFocusLost(evt);
            }
        });
        vendorName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                vendorNameKeyTyped(evt);
            }
        });
        jPanel1.add(vendorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, 450, 50));

        stallNameLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        stallNameLabel.setText("Stall Name");
        jPanel1.add(stallNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 390, -1, -1));

        stallNameDropDown.setBackground(Color.WHITE);
        stallNameDropDown.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        stallNameDropDown.setForeground(new java.awt.Color(204, 204, 204));
        stallNameDropDown.setSelectedIndex(-1);
        stallNameDropDown.setSelectedItem(null);
        stallNameDropDown.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        stallNameDropDown.setFocusable(false);
        stallNameDropDown.setOpaque(true);
        stallNameDropDown.setRenderer(new DefaultListCellRenderer() {

            // Override the rendering method
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (index == -1 && value == null) {
                    label.setText("Select Stall Here");
                    label.setForeground(new Color(204, 204, 204));
                } else {
                    label.setForeground(Color.BLACK);
                }

                // Apply existing custom rendering (size and border)
                label.setPreferredSize(new Dimension(label.getPreferredSize().width, 40));
                label.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

                return label;
            }
        });
        stallNameDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stallNameDropDownActionPerformed(evt);
            }
        });
        jPanel1.add(stallNameDropDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 430, 450, 50));

        emailLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        emailLabel.setText("Email");
        jPanel1.add(emailLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, -1, -1));

        email.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        email.setForeground(new java.awt.Color(204, 204, 204));
        email.setText("Enter Email Here");
        email.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        email.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                emailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailFocusLost(evt);
            }
        });
        email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailKeyTyped(evt);
            }
        });
        jPanel1.add(email, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 190, 580, 50));

        passwordLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        passwordLabel.setText("Password");
        jPanel1.add(passwordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 270, -1, -1));

        passwordField.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        passwordField.setForeground(new java.awt.Color(204, 204, 204));
        passwordField.setText("Enter Password Here");
        passwordField.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        passwordField.setEchoChar((char) 0);
        passwordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFieldFocusLost(evt);
            }
        });
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordFieldKeyTyped(evt);
            }
        });
        jPanel1.add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 310, 580, 50));

        confirmPasswordLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password");
        jPanel1.add(confirmPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 390, -1, -1));

        confirmPasswordField.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        confirmPasswordField.setForeground(new java.awt.Color(204, 204, 204));
        confirmPasswordField.setText("Retype Password Here");
        confirmPasswordField.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        confirmPasswordField.setEchoChar((char) 0);
        confirmPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                confirmPasswordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                confirmPasswordFieldFocusLost(evt);
            }
        });
        confirmPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                confirmPasswordFieldKeyTyped(evt);
            }
        });
        jPanel1.add(confirmPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 430, 580, 50));

        note.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        note.setText(" •  Password should have at least one special characters (#, @, $, etc.)");
        jPanel1.add(note, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 530, 510, 30));

        note1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        note1.setText("<html><b>Note:</b>");
        note1.setToolTipText("");
        jPanel1.add(note1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 490, 60, 30));

        note2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        note2.setText(" •  Password should consist of 8 to 20 characters");
        jPanel1.add(note2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 490, 360, 30));

        note3.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        note3.setText(" •  Password should have at least one number and one alphabet");
        jPanel1.add(note3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 510, 500, 30));

        confirmButton.setBackground(new java.awt.Color(0, 0, 0));
        confirmButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        confirmButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmButton.setText("Confirm");
        confirmButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        confirmButton.setFocusPainted(false);
        confirmButton.setOpaque(true);
        confirmButton.setPreferredSize(new java.awt.Dimension(200, 50));
        confirmButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                confirmButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                confirmButtonMouseExited(evt);
            }
        });
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });
        jPanel1.add(confirmButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 580, -1, -1));

        cancelButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        cancelButton.setFocusPainted(false);
        cancelButton.setOpaque(true);
        cancelButton.setPreferredSize(new java.awt.Dimension(200, 50));
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelButtonMouseExited(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 580, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered

        // Change cursor and set background
        cancelButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        cancelButton.setBackground(new Color(206, 171, 147));
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void cancelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseExited

        // Change cursor and set background
        cancelButton.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        cancelButton.setBackground(Color.WHITE);
    }//GEN-LAST:event_cancelButtonMouseExited

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        
        // Enable the parent frame
        MainPage.currentFrame.setEnabled(true);
        
        // Dispose the current pop up
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void confirmButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmButtonMouseEntered

        // Change cursor and set background and foreground
        confirmButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        confirmButton.setBackground(new Color(206, 171, 147));
        confirmButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_confirmButtonMouseEntered

    private void confirmButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmButtonMouseExited

        // Change cursor and set background and foreground
        confirmButton.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        confirmButton.setBackground(Color.BLACK);
        confirmButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_confirmButtonMouseExited

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed

        // Retrieve the relevant information
        String vendorIDString = vendorID.getText();
        String vendorNameString = vendorName.getText().strip();
        String stallName = stallNameDropDown.getSelectedItem() == null ? null : stallNameDropDown.getSelectedItem().toString();
        String emailString = email.getText().strip().toLowerCase();
        char[] passwordString = passwordField.getPassword();
        char[] confirmPasswordString = confirmPasswordField.getPassword();
        
        // A variable to store the status of the operation
        int status;
        
        // Add vendor
        if (currentVendor == null) {
        
            // Try to create a new vendor
            status = Vendor.createNewVendor(
                    vendorIDString, 
                    vendorNameString, 
                    stallName, 
                    emailString, 
                    passwordString, 
                    confirmPasswordString
            );
            
        } else {
            
            // Modify the existing vendor
            status = currentVendor.modifyVendor(
                    vendorNameString, 
                    stallName, 
                    emailString, 
                    passwordString, 
                    confirmPasswordString
            );
        }
        
        // Create an empty string to store error message
        String errorMessage = null;
        
        // Generate different error messages
        switch (status) {
            case 0 -> errorMessage = "No empty inputs are allowed. Please make sure that you fill in all the information.";
            case -1 -> errorMessage = "Your email is not in the correct format. Please try again.";
            case -2 -> errorMessage = "Your email has been used by another user. Please try another email.";
            case -3 -> errorMessage = "Your password does not meet the requirement. Please use another password.";
            case -4 -> errorMessage = "Both passwords do not match. Please try again.";
            case -5 -> errorMessage = "Invalid stall name. Please inspect code.";
            case -6 -> errorMessage = "Unable to generate notification for the vendor. Please inspect code.";
        }
        
        // If there is no error message (vendor created / modified successfully)
        if (errorMessage == null) {
            
            // Generate title and description for the notification
            String successTitle = currentVendor == null ? 
                    "Account Created Successfully" : 
                    "Information Updated Successfully";
            
            String successMessage = currentVendor == null ? 
                    "The vendor account has been created successfully." : 
                    "The vendor information is updated successfully";

            // Display a message to indicate success
            SystemPopUp successCreation = new SystemPopUp(
                    MainPage.currentFrame,
                    successTitle,
                    successMessage,
                    new String[]{"OK"}
            );
            successCreation.setVisible(true);
            
            // Refresh the panel
            UserListPanel.updatePanel();
            
            // Dispose the current form
            dispose();
            
            // Enable the user page
            MainPage.currentFrame.setEnabled(true);
            
        } else {
        
            // Create a message to indicate failure in creation / modification
            SystemPopUp failToCreate = new SystemPopUp(
                    MainPage.currentFrame,
                    "Error",
                    errorMessage,
                    new String[]{"OK"}
            );
            failToCreate.setVisible(true);
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void stallNameDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stallNameDropDownActionPerformed

        // Change the text colour to black
        stallNameDropDown.setForeground(Color.BLACK);
        
        // Set the store ID field to the relevant ID
        String selectedStall = String.valueOf(stallNameDropDown.getSelectedItem());
        stallID.setText(Stall.getStallByName(selectedStall).getStallID());
        
        // Set the text to be black
        stallID.setForeground(Color.BLACK);
    }//GEN-LAST:event_stallNameDropDownActionPerformed

    private void vendorNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vendorNameFocusGained
        
        // If the text is enter name here
        if (vendorName.getText().equals("Enter Name Here")) {
            
            // Clear the prompt
            vendorName.setText("");
            
            // Set the text colour to black
            vendorName.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_vendorNameFocusGained

    private void vendorNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vendorNameFocusLost

        // If the text is empty
        if (vendorName.getText().isBlank()) {
        
            // Add the prompt
            vendorName.setText("Enter Name Here");
            
            // Set the text colour to grey
            vendorName.setForeground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_vendorNameFocusLost

    private void emailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailFocusGained
        
        // If the text is enter email here
        if (email.getText().equals("Enter Email Here")) {
            
            // Clear the prompt
            email.setText("");
            
            // Set the text colour to black
            email.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_emailFocusGained

    private void emailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailFocusLost

        // If the text is empty
        if (email.getText().isBlank()) {
        
            // Add the prompt
            email.setText("Enter Email Here");
            
            // Set the text colour to grey
            email.setForeground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_emailFocusLost

    private void passwordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusGained

        // If the text is enter password here
        if (Utility.generateString(passwordField.getPassword()).equals("Enter Password Here")) {
            
            // Clear the prompt
            passwordField.setText("");
            
            // Set the text colour to black
            passwordField.setForeground(Color.BLACK);
            
            // Set the echo char to dot
            passwordField.setEchoChar('•');
        }
    }//GEN-LAST:event_passwordFieldFocusGained

    private void passwordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusLost

        // If the password is empty
        if (passwordField.getPassword().length == 0) {
        
            // Add the prompt
            passwordField.setText("Enter Password Here");
            
            // Set the text colour to grey
            passwordField.setForeground(new Color(204, 204, 204));
            
            // Set echo char to normal character
            passwordField.setEchoChar((char) 0);
        }
    }//GEN-LAST:event_passwordFieldFocusLost

    private void confirmPasswordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_confirmPasswordFieldFocusGained

        // If the text is enter password here
        if (Utility.generateString(confirmPasswordField.getPassword()).equals("Retype Password Here")) {
            
            // Clear the prompt
            confirmPasswordField.setText("");
            
            // Set the text colour to black
            confirmPasswordField.setForeground(Color.BLACK);
            
            // Set the echo char to dot
            confirmPasswordField.setEchoChar('•');
        }
    }//GEN-LAST:event_confirmPasswordFieldFocusGained

    private void confirmPasswordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_confirmPasswordFieldFocusLost

        // If the password is empty
        if (confirmPasswordField.getPassword().length == 0) {
        
            // Add the prompt
            confirmPasswordField.setText("Retype Password Here");
            
            // Set the text colour to grey
            confirmPasswordField.setForeground(new Color(204, 204, 204));
            
            // Set echo char to normal character
            confirmPasswordField.setEchoChar((char) 0);
        }
    }//GEN-LAST:event_confirmPasswordFieldFocusLost

    private void vendorNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vendorNameKeyTyped

        // If the key entered is ";"
        if (evt.getKeyChar() == ';') {
            
            // Remove it
            evt.consume();
        }
    }//GEN-LAST:event_vendorNameKeyTyped

    private void emailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailKeyTyped

        // If the key entered is ";"
        if (evt.getKeyChar() == ';') {
            
            // Remove it
            evt.consume();
        }
    }//GEN-LAST:event_emailKeyTyped

    private void passwordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyTyped

        // If the key entered is ";"
        if (evt.getKeyChar() == ';') {
            
            // Remove it
            evt.consume();
        }
    }//GEN-LAST:event_passwordFieldKeyTyped

    private void confirmPasswordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confirmPasswordFieldKeyTyped

        // If the key entered is ";"
        if (evt.getKeyChar() == ';') {
            
            // Remove it
            evt.consume();
        }
    }//GEN-LAST:event_confirmPasswordFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VendorDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VendorDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VendorDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VendorDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VendorDetailsForm(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JPasswordField confirmPasswordField;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JTextField email;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel note;
    private javax.swing.JLabel note1;
    private javax.swing.JLabel note2;
    private javax.swing.JLabel note3;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField stallID;
    private javax.swing.JLabel stallIDLabel;
    private javax.swing.JComboBox<String> stallNameDropDown;
    private javax.swing.JLabel stallNameLabel;
    private javax.swing.JLabel vendorDetailsTitle;
    private javax.swing.JTextField vendorID;
    private javax.swing.JLabel vendorIDLabel;
    private javax.swing.JTextField vendorName;
    private javax.swing.JLabel vendorNameLabel;
    // End of variables declaration//GEN-END:variables
}
