/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package frontend.pop_up;

import backend.entity.Order;
import frontend.customer.MainPage;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author Beng Rhui (TP068495)
 */
public class ChangeDiningPopUp extends javax.swing.JDialog {

    private static Order.DiningType selectedDiningMethod;
    
    /**
     * Creates new form ChangeDiningPopUp
     */
    public ChangeDiningPopUp(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
    }

    /**
     * This method helps to retrieve the saved dining method from the pop up.
     * @return The dining method selected
     */
    public Order.DiningType getDiningMethod() {
        return selectedDiningMethod;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        promptLabel1 = new javax.swing.JLabel();
        promptLabel2 = new javax.swing.JLabel();
        diningMethodPrompt = new javax.swing.JLabel();
        diningMethodDropDown = new javax.swing.JComboBox<>(
            new String[]{"Dine In", "Takeaway", "Cancel Order"}
        );
        noteLabel = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backgroundPanel.setBackground(new java.awt.Color(255, 251, 233));
        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Change Delivery Method");
        backgroundPanel.add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 500, 50));

        promptLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        promptLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        promptLabel1.setText("There is no delivery runner available currently.");
        backgroundPanel.add(promptLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 500, 40));

        promptLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        promptLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        promptLabel2.setText("â€¨Please choose from the options below.");
        backgroundPanel.add(promptLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 500, 30));

        diningMethodPrompt.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        diningMethodPrompt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        diningMethodPrompt.setText("Dining Method");
        backgroundPanel.add(diningMethodPrompt, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 160, 50));

        diningMethodDropDown.setBackground(Color.WHITE);
        diningMethodDropDown.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        diningMethodDropDown.setForeground(new java.awt.Color(204, 204, 204));
        diningMethodDropDown.setSelectedIndex(-1);
        diningMethodDropDown.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        diningMethodDropDown.setFocusable(false);
        diningMethodDropDown.setOpaque(true);
        diningMethodDropDown.setRenderer(new DefaultListCellRenderer() {

            // Override the rendering method
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (index == -1 && value == null) {
                    label.setText("Select Dining Method");
                    label.setForeground(new Color(204, 204, 204));
                } else {
                    label.setForeground(Color.BLACK);
                }

                // Apply your existing custom rendering (size and border)
                label.setPreferredSize(new Dimension(label.getPreferredSize().width, 40));
                label.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

                return label;
            }
        });
        diningMethodDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diningMethodDropDownActionPerformed(evt);
            }
        });
        backgroundPanel.add(diningMethodDropDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, 230, 50));

        noteLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        noteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noteLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        backgroundPanel.add(noteLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, 400, 50));

        confirmButton.setBackground(new java.awt.Color(0, 0, 0));
        confirmButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        confirmButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmButton.setText("OK");
        confirmButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        confirmButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmButton.setFocusPainted(false);
        confirmButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                confirmButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                confirmButtonMouseExited(evt);
            }
        });
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(confirmButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 310, 400, 50));

        getContentPane().add(backgroundPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 430));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void diningMethodDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diningMethodDropDownActionPerformed

        // Change the text colour to black
        diningMethodDropDown.setForeground(Color.BLACK);
        
        // Get the selected item
        String selectedMethod = diningMethodDropDown.getSelectedItem().toString();

        // Display different note based on selected method
        switch (selectedMethod) {
            case "Dine In", "Takeaway" -> noteLabel.setText("""
                                                            <html>
                                                              <div style='text-align: center;'>
                                                                <i>
                                                                  Note: The delivery fees will automatically be refunded to your wallet.
                                                                </i>
                                                              </div>
                                                            </html>
                                                            """);
            case "Cancel Order" -> noteLabel.setText("""
                                                     <html>
                                                       <div style='text-align: center;'>
                                                         <i>
                                                           Note: The order payment will automatically be refunded to your wallet.
                                                         </i>
                                                       </div>
                                                     </html>
                                                     """);
        }
    }//GEN-LAST:event_diningMethodDropDownActionPerformed

    private void confirmButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmButtonMouseEntered

        // Change the background and text
        confirmButton.setBackground(new Color(206, 171, 147));
        confirmButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_confirmButtonMouseEntered

    private void confirmButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmButtonMouseExited

        // Change the background and text
        confirmButton.setBackground(Color.BLACK);
        confirmButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_confirmButtonMouseExited

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed

        // Check if selection is made
        if (diningMethodDropDown.getSelectedIndex() != -1) {

            // Retrieve the selected method
            String selectedMethod = diningMethodDropDown.getSelectedItem().toString();

            // Retrieve the corresponding dining method type to be passed to backend method
            Order.DiningType selectedDiningType;

            switch (selectedMethod) {
                case "Dine In" -> selectedDiningType = Order.DiningType.DINE_IN;
                case "Takeaway" -> selectedDiningType = Order.DiningType.TAKEAWAY;
                case "Cancel Order" -> selectedDiningType = Order.DiningType.DELIVERY;
                default -> throw new IllegalStateException("Invalid value detected. Please inspect code.");
            }

            // Save the selected dining type
            selectedDiningMethod = selectedDiningType;
            
            // Enable parent frame and dispose the current pop up after done
            MainPage.currentFrame.setEnabled(true);
            dispose();
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChangeDiningPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChangeDiningPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChangeDiningPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChangeDiningPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChangeDiningPopUp dialog = new ChangeDiningPopUp(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton confirmButton;
    private javax.swing.JComboBox<String> diningMethodDropDown;
    private javax.swing.JLabel diningMethodPrompt;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JLabel promptLabel1;
    private javax.swing.JLabel promptLabel2;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
