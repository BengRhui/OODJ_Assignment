/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend.pop_up;

import backend.entity.Item;
import backend.file_io.PictureIO;
import frontend.vendor.ItemListingPanel;
import frontend.vendor.MainPage;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Beng Rhui (TP068495)
 */
public class HandleItemPopUp extends javax.swing.JFrame {

    private JFrame parentFrame;
    private Item currentItem;
    private String title;
    private File itemPictureFile;
    public static final int ADD_ITEMS = 0;
    public static final int MODIFY_ITEMS = 1;
    
    /**
     * Creates new form PopUp_CreateItem
     * 
     * @param frame The parent frame that invokes the current frame
     * @param item The item parsed into the pop up
     * @param status {@code 0} for add items, {@code 1} for modify items
     */
    public HandleItemPopUp(JFrame frame, Item item, int status) {
        
        // Set parent frame and item
        parentFrame = frame;
        currentItem = item;
        
        // Set title
        switch (status) {
            case 0 -> title = "Add Item";
            case 1 -> title = "Modify Item";
            default -> throw new IllegalArgumentException("Wrong argument. Only 0 (for adding items) and 1 (for modifying items) is allowed.");
        }

        // Render GUI components
        initComponents();
        
        // Initialize text fields if item is not null
        if (item != null) initializeTextFields();
    }
    
    /**
     * This method helps to initialize the text inputs for the modify item frame.
     */
    public void initializeTextFields() {
        
        // Set the values of the fields
        nameInput.setText(currentItem.getItemName());
        priceInput.setText(String.format("%.2f", currentItem.getPrice()));
        descriptionInput.setText(currentItem.getDescription());
        itemPictureFile = PictureIO.retrieveItemPicture(currentItem);
        
        // Set the colour to black
        nameInput.setForeground(Color.BLACK);
        priceInput.setForeground(Color.BLACK);
        descriptionInput.setForeground(Color.BLACK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        backgroundPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        nameTitleLabel = new javax.swing.JLabel();
        priceTitleLabel = new javax.swing.JLabel();
        nameInput = new javax.swing.JTextField();
        priceInput = new javax.swing.JTextField();
        picturePromptLabel = new javax.swing.JLabel();
        uploadButton = new javax.swing.JButton();
        fileNameText = new javax.swing.JLabel();
        fileFormatText = new javax.swing.JLabel();
        descriptionTitleLabel = new javax.swing.JLabel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionInput = new javax.swing.JTextArea();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(title);
        setResizable(false);

        backgroundPanel.setBackground(new java.awt.Color(255, 251, 233));
        backgroundPanel.setMaximumSize(new java.awt.Dimension(717, 600));
        backgroundPanel.setMinimumSize(new java.awt.Dimension(717, 600));
        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleLabel.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        titleLabel.setText(title);
        backgroundPanel.add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 380, 50));

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/cancel_icon.png"))); // NOI18N
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setFocusPainted(false);
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeButtonMouseExited(evt);
            }
        });
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 50, 40, 50));

        nameTitleLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        nameTitleLabel.setText("Name");
        backgroundPanel.add(nameTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, -1, -1));

        priceTitleLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        priceTitleLabel.setText("Price (RM)");
        backgroundPanel.add(priceTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, -1, 40));

        nameInput.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        nameInput.setForeground(new java.awt.Color(204, 204, 204));
        nameInput.setText("Enter Item Name");
        nameInput.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        nameInput.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        nameInput.setOpaque(true);
        nameInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nameInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameInputFocusLost(evt);
            }
        });
        backgroundPanel.add(nameInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, 400, 50));

        priceInput.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        priceInput.setForeground(new java.awt.Color(204, 204, 204));
        priceInput.setText("0.00");
        priceInput.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        priceInput.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        priceInput.setOpaque(true);
        priceInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                priceInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceInputFocusLost(evt);
            }
        });
        backgroundPanel.add(priceInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 160, 150, 50));

        picturePromptLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        picturePromptLabel.setText("Item Picture:");
        backgroundPanel.add(picturePromptLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, -1, 45));

        uploadButton.setBackground(new java.awt.Color(0, 0, 0));
        uploadButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        uploadButton.setForeground(new java.awt.Color(255, 255, 255));
        uploadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/system/upload_icon.png"))); // NOI18N
        uploadButton.setText("  Upload");
        uploadButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        uploadButton.setFocusPainted(false);
        uploadButton.setFocusable(false);
        uploadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                uploadButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                uploadButtonMouseExited(evt);
            }
        });
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(uploadButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 240, 140, 50));

        fileNameText.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        fileNameText.setText("(No files chosen)");
        fileNameText.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        backgroundPanel.add(fileNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 240, 240, 25));

        fileFormatText.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        fileFormatText.setText("Supported formats: .png, .jpeg, .jpg");
        backgroundPanel.add(fileFormatText, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 270, 230, -1));

        descriptionTitleLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        descriptionTitleLabel.setText("Description");
        backgroundPanel.add(descriptionTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, -1, -1));

        descriptionScrollPane.setBorder(null);
        descriptionScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        descriptionScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        descriptionScrollPane.setViewportBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        descriptionScrollPane.setFocusable(false);
        descriptionScrollPane.setOpaque(false);

        descriptionInput.setColumns(20);
        descriptionInput.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        descriptionInput.setForeground(new java.awt.Color(204, 204, 204));
        descriptionInput.setLineWrap(true);
        descriptionInput.setRows(4);
        descriptionInput.setText("Enter Description Here");
        descriptionInput.setToolTipText("");
        descriptionInput.setWrapStyleWord(true);
        descriptionInput.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        descriptionInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                descriptionInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                descriptionInputFocusLost(evt);
            }
        });
        descriptionScrollPane.setViewportView(descriptionInput);

        backgroundPanel.add(descriptionScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, 560, 130));

        confirmButton.setBackground(new java.awt.Color(0, 0, 0));
        confirmButton.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        confirmButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmButton.setText("OK");
        confirmButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        confirmButton.setFocusPainted(false);
        confirmButton.setOpaque(true);
        confirmButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                confirmButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                confirmButtonMouseExited(evt);
            }
        });
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(confirmButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 520, 270, 56));

        cancelButton.setBackground(Color.WHITE);
        cancelButton.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("");
        cancelButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        cancelButton.setDefaultCapable(false);
        cancelButton.setFocusPainted(false);
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelButtonMouseExited(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 520, 270, 56));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseEntered

        // Set the cursor
        closeButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_closeButtonMouseEntered

    private void closeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseExited

        // Set the cursor
        closeButton.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_closeButtonMouseExited

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

        // Dispose the current pop up
        dispose();
        
        // Enable the parent frame
        parentFrame.setEnabled(true);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void uploadButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadButtonMouseEntered

        // Change the cursor
        uploadButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_uploadButtonMouseEntered

    private void uploadButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadButtonMouseExited

        // Change the cursor
        uploadButton.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_uploadButtonMouseExited

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed

        // Set filters to filter the types of file received
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Picture files", "jpg", "jpeg", "png"
        );

        // Apply the filter on the file chooser
        fileChooser.setFileFilter(filter);

        // Open a file chooser
        int status = fileChooser.showOpenDialog(this);

        // If a file is chosen
        if (status == JFileChooser.APPROVE_OPTION) {

            // Retrieve the selected file
            itemPictureFile = fileChooser.getSelectedFile();

            // Display the file name
            fileNameText.setText(itemPictureFile.getName());
            fileNameText.setFont(new Font("Arial", Font.BOLD, 14));
        }
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered

        // Set cursor
        cancelButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        
        // Change background
        cancelButton.setBackground(new Color(206, 171, 147));
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void cancelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseExited

        // Set cursor
        cancelButton.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
        // Change background
        cancelButton.setBackground(Color.WHITE);
    }//GEN-LAST:event_cancelButtonMouseExited

    private void confirmButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmButtonMouseEntered

        // Set cursor
        confirmButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        
        // Change background
        confirmButton.setBackground(new Color(206, 171, 147));
        confirmButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_confirmButtonMouseEntered

    private void confirmButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmButtonMouseExited

        // Set cursor
        confirmButton.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
        // Change background
        confirmButton.setBackground(Color.BLACK);
        confirmButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_confirmButtonMouseExited

    private void nameInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameInputFocusGained

        // If the prompt is still "Enter Item Name"
        if (nameInput.getText().equals("Enter Item Name")) {
            
            // Clear the prompt
            nameInput.setText("");
            
            // Change the colour of the text
            nameInput.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_nameInputFocusGained

    private void nameInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameInputFocusLost
    
        // If the prompt is empty
        if (nameInput.getText().isBlank()) {
            
            // Set the prompt
            nameInput.setText("Enter Item Name");
            
            // Change the colour of the text to grey
            nameInput.setForeground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_nameInputFocusLost

    private void priceInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceInputFocusGained

        // If the prompt is 0.00
        if (priceInput.getText().equals("0.00")) {
            
            // Remove the prompt
            priceInput.setText("");
            
            // Change the colour of the text
            priceInput.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_priceInputFocusGained

    private void priceInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceInputFocusLost

        // If the prompt is blank
        if (priceInput.getText().isBlank()) {
            
            // Remove the prompt
            priceInput.setText("0.00");
            
            // Change the colour of the text
            priceInput.setForeground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_priceInputFocusLost

    private void descriptionInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descriptionInputFocusGained

        // If the prompt is "Enter Description Here"
        if (descriptionInput.getText().equals("Enter Description Here")) {
            
            // Remove the prompt
            descriptionInput.setText("");
            
            // Change the colour of the text
            descriptionInput.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_descriptionInputFocusGained

    private void descriptionInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descriptionInputFocusLost

        // If the prompt is blank
        if (descriptionInput.getText().isBlank()) {
            
            // Set the prompt back to the initial prompt
            descriptionInput.setText("Enter Description Here");
            
            // Change the colour of the text
            descriptionInput.setForeground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_descriptionInputFocusLost

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

        // Dispose the current frame
        dispose();
        
        // Enable the parent frame
        parentFrame.setEnabled(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed

        try {
            
            // Get all the details for the item
            String itemName = nameInput.getText().strip();
            double itemPrice = Double.parseDouble(priceInput.getText());
            String itemDescription = descriptionInput.getText().strip();
            
            // If any input is empty, throw an exception
            if (itemName.equals("Enter Item Name") || itemPrice == 0 || itemDescription.equals("Enter Description Here")) {
                throw new NullPointerException();
            }
            
            // If the price is lesser than 0, throw an exception
            if (itemPrice <= 0) throw new NumberFormatException();
            
            // Update the information for the operations
            boolean updateStatus;
            switch (title) {
                case "Add Item" -> updateStatus = Item.addNewVendorItem(itemName, itemPrice, itemDescription, itemPictureFile, MainPage.getVendor());
                case "Modify Item" -> updateStatus = currentItem.updateItem(itemName, itemPrice, itemDescription, itemPictureFile);
                default -> throw new IllegalStateException("The current status is invalid. Please inspect code.");
            }
            
            // If the update is successful
            if (updateStatus) {
                
                // Show message indicating that change is made successfully
                SystemPopUp changeSuccess;
                
                // Customize message depending on the types of action
                switch (title) {
                    
                    // For adding items
                    case "Add Item" -> changeSuccess = new SystemPopUp(
                            this,
                            "Add Success",
                            "The new item is added successfully.",
                            new String[]{"OK"}
                    );
                    
                    // For modifying item details
                    case "Modify Item" -> changeSuccess = new SystemPopUp(
                            this,
                            "Update Success",
                            "The item details are updated successfully.",
                            new String[]{"OK"}
                    );
                    
                    // If not, an exception is thrown
                    default -> throw new IllegalStateException("The current status is invalid. Please inspect code.");
                }
                
                // Display the message to the vendor
                changeSuccess.setVisible(true);
                
                // Dispose the current frame
                dispose();
                
                // Refresh and enable the parent frame
                ItemListingPanel.updatePanes();
                parentFrame.setEnabled(true);
                
            // Unsuccessful update due to picture error or notification generate error
            } else {
                
                // Show error in saving the picture file or generating notification
                SystemPopUp uploadPictureError = new SystemPopUp(
                    this,
                    "Upload Error",
                    "There is some issue with the system. Either the picture<br>"
                            + "is not saved, or the corresponding notification is not generated.<br>"
                            + "Please try again.",
                    new String[]{"OK"}
                );
                uploadPictureError.setVisible(true);
            }
        
        // When the input is null
        } catch (NullPointerException ex) {
            
            // Display message to inform user to not leave blank messages
            SystemPopUp emptyError = new SystemPopUp(
                    this,
                    "Error Input",
                    "No empty inputs are allowed.<br>Please make sure that valid values are inputted.",
                    new String[]{"OK"}
            );
            emptyError.setVisible(true);
            
        // When the price entered is incorrect    
        } catch (NumberFormatException ex) {
            
            // Display message to tell that the price must be positive
            SystemPopUp numberError = new SystemPopUp(
                    this,
                    "Error Input",
                    "The price of an item must be more than RM0.00.",
                    new String[]{"OK"}
            );
            numberError.setVisible(true);
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HandleItemPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HandleItemPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HandleItemPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HandleItemPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Item item = Item.getItemList().get(1);
                new HandleItemPopUp(MainPage.currentFrame, item, 1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JTextArea descriptionInput;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JLabel descriptionTitleLabel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileFormatText;
    private javax.swing.JLabel fileNameText;
    private javax.swing.JTextField nameInput;
    private javax.swing.JLabel nameTitleLabel;
    private javax.swing.JLabel picturePromptLabel;
    private javax.swing.JTextField priceInput;
    private javax.swing.JLabel priceTitleLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables
}
