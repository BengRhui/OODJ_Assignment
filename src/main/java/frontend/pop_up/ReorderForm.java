/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package frontend.pop_up;

import backend.entity.Order;
import backend.entity.Stall;
import frontend.customer.EWalletPanel;
import frontend.customer.HomePanel;
import frontend.customer.MainPage;
import frontend.customer.PastOrderDetailsForm;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author Beng Rhui (TP068495)
 */
public class ReorderForm extends javax.swing.JDialog {

    private Order currentOrder;
    private JFrame parentFrame;
    /**
     * Creates new form ReorderForm
     */
    public ReorderForm(JFrame parent, Order order) {
        
        // Call parent constructor
        super(parent, true);
        
        // Initialize order and parent frame
        currentOrder = order;
        parentFrame = parent;
        
        // Render GUI
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        reorderItemTitle = new javax.swing.JLabel();
        diningMethodTitle = new javax.swing.JLabel();
        diningMethodDropDown = new javax.swing.JComboBox<>(
            Order.DiningType.DINING_OPTIONS
        );
        tableNumberTitle = new javax.swing.JLabel();
        tableNumberField = new javax.swing.JTextField();
        additionalNotesTitle = new javax.swing.JLabel();
        additonalNotesScrollPane = new javax.swing.JScrollPane();
        additionalNotesField = new javax.swing.JTextArea();
        errorMessageText = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Reorder Item");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backgroundPanel.setBackground(new java.awt.Color(255, 251, 233));
        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        reorderItemTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        reorderItemTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reorderItemTitle.setText("Reorder Item");
        backgroundPanel.add(reorderItemTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 30, 560, -1));

        diningMethodTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        diningMethodTitle.setText("<html>Dining Method</html>");
        backgroundPanel.add(diningMethodTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 90, 50));

        diningMethodDropDown.setBackground(Color.WHITE);
        diningMethodDropDown.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        diningMethodDropDown.setForeground(new java.awt.Color(204, 204, 204));
        diningMethodDropDown.setSelectedIndex(-1);
        diningMethodDropDown.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        diningMethodDropDown.setFocusable(false);
        diningMethodDropDown.setOpaque(true);
        diningMethodDropDown.setRenderer(new DefaultListCellRenderer() {

            // Override the rendering method
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (index == -1 && value == null) {
                    label.setText("Select Dining Method Here");
                    label.setForeground(new Color(204, 204, 204));
                } else {
                    label.setForeground(Color.BLACK);
                }

                // Apply your existing custom rendering (size and border)
                label.setPreferredSize(new Dimension(label.getPreferredSize().width, 40));
                label.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

                return label;
            }
        });
        diningMethodDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diningMethodDropDownActionPerformed(evt);
            }
        });
        backgroundPanel.add(diningMethodDropDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 280, 50));

        tableNumberTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tableNumberTitle.setText("<html>Table Number</html>");
        backgroundPanel.add(tableNumberTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 100, 60));

        tableNumberField.setBackground(new java.awt.Color(204, 204, 204));
        tableNumberField.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tableNumberField.setForeground(new java.awt.Color(204, 204, 204));
        tableNumberField.setText("Enter Table No (if applicable)");
        tableNumberField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15)));
        tableNumberField.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        tableNumberField.setEnabled(false);
        tableNumberField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableNumberFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tableNumberFieldFocusLost(evt);
            }
        });
        backgroundPanel.add(tableNumberField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 280, 50));

        additionalNotesTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        additionalNotesTitle.setText("<html>Additional Notes</html>");
        additionalNotesTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        backgroundPanel.add(additionalNotesTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 110, 60));

        additonalNotesScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        additionalNotesField.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        additionalNotesField.setForeground(new java.awt.Color(204, 204, 204));
        additionalNotesField.setRows(3);
        additionalNotesField.setText("Enter Notes Here");
        additionalNotesField.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 15, 12, 15));
        additionalNotesField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                additionalNotesFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                additionalNotesFieldFocusLost(evt);
            }
        });
        additionalNotesField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                additionalNotesFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                additionalNotesFieldKeyTyped(evt);
            }
        });
        additonalNotesScrollPane.setViewportView(additionalNotesField);

        backgroundPanel.add(additonalNotesScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 240, 280, 120));

        errorMessageText.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        errorMessageText.setForeground(new java.awt.Color(189, 0, 0));
        backgroundPanel.add(errorMessageText, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 370, 400, 40));

        confirmButton.setBackground(new java.awt.Color(0, 0, 0));
        confirmButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        confirmButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmButton.setText("Confirm");
        confirmButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        confirmButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmButton.setFocusPainted(false);
        confirmButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                confirmButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                confirmButtonMouseExited(evt);
            }
        });
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(confirmButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 420, 190, 50));

        cancelButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelButton.setFocusPainted(false);
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelButtonMouseExited(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 420, 190, 50));

        getContentPane().add(backgroundPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void diningMethodDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diningMethodDropDownActionPerformed

        // Change the text colour to black
        diningMethodDropDown.setForeground(Color.BLACK);

        // Check if the current selection is dine in
        if (diningMethodDropDown.getSelectedItem().toString().equals("Dine In")) {
        
            // Enable the table number field
            tableNumberField.setEnabled(true);
            tableNumberField.setBackground(Color.WHITE);
            
        } else {
        
            // Disable the table number field
            tableNumberField.setEnabled(false);
            tableNumberField.setBackground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_diningMethodDropDownActionPerformed

    private void tableNumberFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableNumberFieldFocusGained

        // If the prompt exists
        if (tableNumberField.getText().equals("Enter Table No (if applicable)")) {
            
            // Remove the text
            tableNumberField.setText("");
            
            // Set text colour
            tableNumberField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_tableNumberFieldFocusGained

    private void tableNumberFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableNumberFieldFocusLost

        // If the input is empty
        if (tableNumberField.getText().isBlank()) {
            
            // Set the prompt
            tableNumberField.setText("Enter Table No (if applicable)");
            
            // Set text colour
            tableNumberField.setForeground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_tableNumberFieldFocusLost

    private void additionalNotesFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_additionalNotesFieldFocusGained

        // If the prompt exists
        if (additionalNotesField.getText().equals("Enter Notes Here")) {
            
            // Remove the text
            additionalNotesField.setText("");
            
            // Set text colour
            additionalNotesField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_additionalNotesFieldFocusGained

    private void additionalNotesFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_additionalNotesFieldFocusLost

        // If the input is empty
        if (additionalNotesField.getText().isBlank()) {
            
            // Set the prompt
            additionalNotesField.setText("Enter Notes Here");
            
            // Set text colour
            additionalNotesField.setForeground(new Color(204, 204, 204));
        }
    }//GEN-LAST:event_additionalNotesFieldFocusLost

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered

        // Change background
        cancelButton.setBackground(new Color(206, 171, 147));
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void cancelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseExited

        // Change background
        cancelButton.setBackground(Color.WHITE);
    }//GEN-LAST:event_cancelButtonMouseExited

    private void confirmButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmButtonMouseEntered

        // Change background and text
        confirmButton.setBackground(new Color(206, 171, 147));
        confirmButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_confirmButtonMouseEntered

    private void confirmButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmButtonMouseExited

        // Change background and text
        confirmButton.setBackground(Color.BLACK);
        confirmButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_confirmButtonMouseExited

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

        // Enable the parent frame
        parentFrame.setEnabled(true);
        
        // Dispose the current pop up
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        
        // Retrieve the necessary information
        Stall stall = currentOrder.getOrderedStall();
        
        // Get the cart (changed to string key)
        Map<String, Integer> cart = currentOrder.getOrderItem().entrySet().stream()
                .collect(Collectors.toMap(
                        entry -> entry.getKey().getItemID(),
                        Map.Entry::getValue
                ));
        
        if (diningMethodDropDown.getSelectedIndex() == -1) {
        
            // Display error message
            errorMessageText.setText("Error: No dining method selected.");
            
        } else if (diningMethodDropDown.getSelectedItem().toString().equals("Dine In") && 
                (tableNumberField.getText().equals("Enter Table No (if applicable)") || tableNumberField.getText().isBlank())) {
            
            // Display error message
            errorMessageText.setText("Error: Table number not provided.");
            
        } else {
            
            // Retrieve the dining type
            Order.DiningType diningMethod = Order.DiningType.getFromString(diningMethodDropDown.getSelectedItem().toString());
            
            // Set the dining cart (to remove delivery fees)
            MainPage.getCustomer().setDiningMethodInCart(diningMethod);
            
            // Remove the error message
            errorMessageText.setText("");
            
            // Place the order
            int placeOrderStatus = MainPage.getCustomer().placeOrder(
                    stall, 
                    cart, 
                    diningMethod, 
                    additionalNotesField.getText().equals("Enter Notes Here") ? "-" : additionalNotesField.getText().strip(), 
                    tableNumberField.getText().equals("Enter Table No (if applicable)") ? null : tableNumberField.getText().toUpperCase()
            );
            
            // Go through different cases of order
            switch (placeOrderStatus) {
            
                case 1 -> {
                
                    // Dispose current frame
                    dispose();
                    
                    // Display system message to indicate that order is placed successfully
                    SystemPopUp successMessage = new SystemPopUp(
                            PastOrderDetailsForm.currentFrame,
                            "Order Placed Successful",
                            "Your order has been placed. You may return to the home page to check its details.",
                            new String[]{"OK"}
                    );
                    successMessage.setVisible(true);
                    
                    // Enable the parent frame
                    PastOrderDetailsForm.currentFrame.setEnabled(true);
                            
                    // Refresh the order panel
                    HomePanel.updateOrderPanel();
                    EWalletPanel.refreshPanel();
                }
                
                // Set the error message for any errors taking place
                case 0 -> errorMessageText.setText("Error: Empty cart. Please inspect code.");
                case -1 -> errorMessageText.setText("Error: Insufficient wallent balance.");
                case -2 -> errorMessageText.setText("Runner unavailable. Choose another method.");
                
                // For other errors (unable to generate notification or transaction history)
                default -> errorMessageText.setText("Error: Unexpected error occurred. Please inspect code.");
            }
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void additionalNotesFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_additionalNotesFieldKeyPressed

        // If enter key is pressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        
            // Remove it
            evt.consume();
        }
    }//GEN-LAST:event_additionalNotesFieldKeyPressed

    private void additionalNotesFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_additionalNotesFieldKeyTyped

        // If ';' is pressed
        if (evt.getKeyChar() == ';') {
        
            // Remove it
            evt.consume();
        }
    }//GEN-LAST:event_additionalNotesFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReorderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReorderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReorderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReorderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ReorderForm dialog = new ReorderForm(new javax.swing.JFrame(), Order.getOrderList().getFirst());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea additionalNotesField;
    private javax.swing.JLabel additionalNotesTitle;
    private javax.swing.JScrollPane additonalNotesScrollPane;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private static javax.swing.JComboBox<String> diningMethodDropDown;
    private javax.swing.JLabel diningMethodTitle;
    private javax.swing.JLabel errorMessageText;
    private javax.swing.JLabel reorderItemTitle;
    private javax.swing.JTextField tableNumberField;
    private javax.swing.JLabel tableNumberTitle;
    // End of variables declaration//GEN-END:variables
}
