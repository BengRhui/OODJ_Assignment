/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.runner;

import backend.entity.DeliveryRunner;
import backend.entity.Order;
import java.awt.Color;
import java.awt.Font;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JLabel;

/**
 *
 * @author Jun Hong (TP068580), Beng Rhui (TP068495)
 */
public class HomePagePanel extends javax.swing.JPanel {

    private static DeliveryRunner currentRunner;
    private static Order currentOrder;
    
    /**
     * Creates new form HomePagePanel
     */
    public HomePagePanel() {
        
        // Initialize values
        currentRunner = MainPage.getRunner();
       
        // Render GUI components
        initComponents();
        
        // Update the content panel
        updatePanel();
        
        // Update panel to check availability
        updateAvailabilityButton();
    }
    
    /**
     * This method helps to update the availability button that allows runner to toggle their availability.
     */
    public static void updateAvailabilityButton() {
        
        // If there is associated order - runner is definitely busy
        if (currentOrder != null) {
        
            // Hide the availability button
            availableButton.setVisible(false);
            
        } else {

            // Retrieve the availability list
            Map<String, Boolean> availabilityList = DeliveryRunner.getAvailabilityList();

            // Check if the runner is free
            Boolean availabilityStatus = availabilityList.get(currentRunner.getUserID());
            
            // Changes the button colour accordingly
            if (availabilityStatus) {
            
                // Display green button with available text
                availableButton.setBackground(new Color(204, 255, 204));
                availableButton.setForeground(new Color(0, 153, 0));
                availableButton.setBorder(BorderFactory.createLineBorder(new Color(0, 153, 0), 2, true));
                availableButton.setText("Available");
                
            } else {
            
                // Display red button with not available text
                availableButton.setBackground(new Color(255, 204, 204));
                availableButton.setForeground(new Color(204, 0, 0));
                availableButton.setBorder(BorderFactory.createLineBorder(new Color(204, 0, 0), 2, true));
                availableButton.setText("Not Available");
            }
            
            // Display the button
            availableButton.setVisible(true);
        }
    }
    
    /**
     * This method helps to refresh the content panel containing the panels for delivery.
     */
    public static void updatePanel() {
        
        // Clear the contents of the panel
        contentPanel.removeAll();
    
        // Get the current order for the runner
        currentOrder = currentRunner.retrieveCurrentAssociatedOrder();
        
        // Check if the order is null
        if (currentOrder == null) {
            
            // If yes, add a JLabel to inform that no order is available
            JLabel noOrderLabel = new JLabel("No order available for now.");
            noOrderLabel.setFont(new Font("Arial", Font.PLAIN, 24));
            noOrderLabel.setBounds(0, 0, 300, 30);
            
            // Add the label to the panel
            contentPanel.add(noOrderLabel);
            
        } else {
            
            // Retrieve the size of the content panel
            int panelWidth = 1260;
            int panelHeight = 460;
            
            // Generate the details panel
            DeliveryDetailsPanel detailsPanel = new DeliveryDetailsPanel(currentOrder);
            detailsPanel.setBounds(0, 0, panelWidth, panelHeight);

            // Add the panel to content panel
            contentPanel.add(detailsPanel);
        }
        
        // Refresh the panel
        contentPanel.revalidate();
        contentPanel.repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        contentPanel = new javax.swing.JPanel();
        availableButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 251, 233));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleLabel.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        titleLabel.setText("Current Task");
        add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        contentPanel.setBackground(new java.awt.Color(255, 251, 233));
        contentPanel.setLayout(null);
        add(contentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 1260, 460));

        availableButton.setBackground(new java.awt.Color(204, 255, 204));
        availableButton.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        availableButton.setForeground(new java.awt.Color(0, 153, 0));
        availableButton.setText("Available");
        availableButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 0), 2, true));
        availableButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        availableButton.setFocusPainted(false);
        availableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableButtonActionPerformed(evt);
            }
        });
        add(availableButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 60, 260, 60));
    }// </editor-fold>//GEN-END:initComponents

    private void availableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableButtonActionPerformed

        // Retrieve status
        Map<String, Boolean> availabilityList = DeliveryRunner.getAvailabilityList();
        Boolean availabilityStatus = availabilityList.get(currentRunner.getUserID());
        
        // Switch to the opposite of the current status
        currentRunner.updateAvailability(!availabilityStatus);
        
        // Update panel
        updateAvailabilityButton();
    }//GEN-LAST:event_availableButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton availableButton;
    private static javax.swing.JPanel contentPanel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
